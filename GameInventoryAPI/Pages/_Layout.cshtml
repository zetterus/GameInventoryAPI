@using System.Security.Claims
<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8" />
    <title>@ViewData["Title"]</title>
    <!-- Подключаем Google Material Symbols с увеличенным opsz и новой иконкой -->
    <link rel="stylesheet" href="https://fonts.googleapis.com/css2?family=Material+Symbols+Outlined:opsz,wght,FILL,GRAD@48,100..700,0..1,-50..200&icon_names=brightness_4" />
    <style>
        :root {
            /* Светлая тема (по умолчанию) */
            --background-color: #ffffff;
            --text-color: #333333;
            --nav-bg-color: #f8f9fa;
            --button-bg-color: #d0d0d0;
            --button-hover-bg-color: #c0c0c0;
            --input-bg-color: #ffffff;
            --input-text-color: #333333;
            --input-border-color: #ced4da;
            --icon-color: #666666;
            --shadow-color: rgba(0, 0, 0, 0.1);
        }

        /* Тёмная тема */
        [data-theme="dark"] {
            --background-color: #1a1a1a;
            --text-color: #e0e0e0;
            --nav-bg-color: #2c2c2c;
            --button-bg-color: #4a4a4a;
            --button-hover-bg-color: #5a5a5a;
            --input-bg-color: #333333;
            --input-text-color: #e0e0e0;
            --input-border-color: #555555;
            --icon-color: #bbbbbb;
            --shadow-color: rgba(255, 255, 255, 0.1);
        }

        body {
            background-color: var(--background-color);
            color: var(--text-color);
            margin: 0;
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            transition: background-color 0.3s, color 0.3s;
        }

        nav {
            background-color: var(--nav-bg-color);
            padding: 15px 20px;
            display: flex;
            justify-content: space-between;
            align-items: center;
            box-shadow: 0 2px 10px var(--shadow-color);
        }

        .nav-left, .nav-right {
            display: flex;
            align-items: center;
            gap: 15px;
        }

            .nav-left button, .nav-right button {
                background-color: var(--button-bg-color);
                color: var(--text-color);
                border: none;
                padding: 8px 16px;
                border-radius: 5px;
                font-size: 16px;
                font-weight: 500;
                cursor: pointer;
                transition: background-color 0.3s;
            }

                .nav-left button:hover, .nav-right button:hover {
                    background-color: var(--button-hover-bg-color);
                }

            .nav-right input {
                padding: 8px;
                background-color: var(--input-bg-color);
                color: var(--input-text-color);
                border: 1px solid var(--input-border-color);
                border-radius: 5px;
                font-size: 16px;
                transition: border-color 0.3s;
            }

                .nav-right input:focus {
                    outline: none;
                    border-color: #007bff;
                }

        .theme-toggle {
            cursor: pointer;
            padding: 12px;
            border-radius: 50%;
            transition: background-color 0.3s;
        }

            .theme-toggle:hover {
                background-color: rgba(0, 0, 0, 0.1);
            }

        .material-symbols-outlined {
            color: var(--icon-color);
            font-size: 96px; /* Увеличиваем размер ещё больше */
            line-height: 1;
            display: block;
            transform: scale(1.5); /* Дополнительное масштабирование */
            transition: color 0.3s, transform 0.3s;
        }

            .material-symbols-outlined:hover {
                color: #007bff;
                transform: scale(1.6); /* Лёгкое увеличение при наведении */
            }

        .nav-right span {
            font-size: 16px;
            font-weight: 500;
        }

        main {
            max-width: 1200px;
            margin: 40px auto;
            padding: 0 20px;
        }
    </style>
</head>
<body>
    <header>
        <nav>
            <div class="nav-left">
                <form method="get" action="/" style="display: inline;">
                    <button type="submit">Home</button>
                </form>
                @if (User.Identity.IsAuthenticated)
                {
                    @if (User.IsInRole("Admin"))
                    {
                        <form method="get" action="/AdminPanel" style="display: inline;">
                            <button type="submit">Admin Panel</button>
                        </form>
                    }
                    else if (User.IsInRole("User"))
                    {
                        <form method="get" action="/Profile" style="display: inline;">
                            <button type="submit">Profile</button>
                        </form>
                    }
                    <form method="post" action="/Logout" style="display: inline;">
                        @Html.AntiForgeryToken()
                        <button type="submit">Logout</button>
                    </form>
                }
                else
                {
                    <form method="get" action="/Login" style="display: inline;">
                        <button type="submit">Login</button>
                    </form>
                    <form method="get" action="/Register" style="display: inline;">
                        <button type="submit">Register</button>
                    </form>
                }
            </div>
            <div class="nav-right">
                @if (!User.Identity.IsAuthenticated)
                {
                    <form method="post" action="/Login" style="display: inline;">
                        @Html.AntiForgeryToken()
                        <input type="text" name="Username" placeholder="Username" required />
                        <input type="password" name="Password" placeholder="Password" required />
                        <button type="submit">Sign In</button>
                    </form>
                }
                <div class="theme-toggle" onclick="toggleTheme()">
                    <span class="material-symbols-outlined">brightness_4</span>
                </div>
                @if (User.Identity.IsAuthenticated)
                {
                    <span>Welcome, @User.Identity.Name! (Role: @User.Claims.FirstOrDefault(c => c.Type == ClaimTypes.Role)?.Value)</span>
                }
            </div>
        </nav>
    </header>
    <main>
        @RenderBody()
        @{
            Console.WriteLine("User Information:");
            Console.WriteLine($"Is Authenticated: {User.Identity.IsAuthenticated}");
            Console.WriteLine($"Username: {User.Identity.Name}");
            Console.WriteLine($"Roles: {string.Join(", ", User.Claims.Where(c => c.Type == ClaimTypes.Role).Select(c => c.Value))}");
        }
    </main>

    <script>
        document.addEventListener('DOMContentLoaded', () => {
            const savedTheme = localStorage.getItem('theme') || 'light';
            document.documentElement.setAttribute('data-theme', savedTheme);
        });

        function toggleTheme() {
            const currentTheme = document.documentElement.getAttribute('data-theme');
            const newTheme = currentTheme === 'dark' ? 'light' : 'dark';
            document.documentElement.setAttribute('data-theme', newTheme);
            localStorage.setItem('theme', newTheme);
        }
    </script>
</body>
</html>